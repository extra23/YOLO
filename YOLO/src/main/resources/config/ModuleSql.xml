<?xml version="1.0" encoding="UTF-8"?>



<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- sql문에 대한 맵핑을 해줄 것임. -->

<mapper namespace="yolo.dao.InterfaceModuleMapper"> <!-- namespace는 우리가 부를 별명으로 사용된다. -->

	<!-- 이 안에는 우리가 쓸 쿼리문들이 들어간다. -->
	<!-- 우리가 jdbc로 만들었던 쿼리문을 여기에 태그로 작성하면 됨. -->


	<!-- 나중에 namespace에서는 id를 호출해서 내가 원하는 쿼리문을 따로 뽑아 사용한다. 수정할 때 편리하도록 분리시킨 
		것임. -->
	<!-- 필요한 정보들을 적어줘야 함. 인자값, 쿼리문 등 -->
	<!-- 단, 쿼리문에서는 (?,?)이 아닌 (#{})를 사용해줌. -->
	<insert id="insertModule" parameterType="Module">
		insert into
		module(courseId, mTitle, mContent, mSummary, userId)
		values(#{courseId}, #{mTitle}, #{mContent}, #{mSummary}, #{userId})
	</insert>

	<select id="selectModuleByUserId" parameterType="Integer"
		resultType="Module"><!--resultType: RowMapper라고 생각하면 됨.User의 타입으로 만들어 주는 것. -->
		select * from module where userId=#{userId}
	</select>

	<select id="selectModuleByModuleId" parameterType="Integer"
		resultType="Module">
		select * from module where moduleId=#{moduleId}
	</select>

	<select id="selectModuleList" resultType="Module">
		select * from module
	</select>

	<select id="selectModuleListByCourseId" parameterType="Integer"
		resultType="Module">
		select * from module where courseId=#{courseId}
	</select>
	
	<select id="selectModuleListByUserId" parameterType="Integer"
		resultType="Module">
		select * from module where userId=#{userId}
	</select>

	<update id="updateModule" parameterType="Module">
		update module set
		courseId=#{courseId}, mTitle=#{mTitle}, mContent=#{mContent},
		mSummary=#{mSummary} where moduleId=#{moduleId}
	</update>

	<delete id="deleteModule" parameterType="Integer">
		delete from module where
		moduleId=#{moduleId}
	</delete>

	<delete id="deleteMuser" parameterType="Integer">
		delete from module where
		userId=#{userId}
	</delete>

	<select id="searchModule" parameterType="string"
		resultType="Search">
		select * from module m join user u on u.userId = m.userId
		where mTitle Like CONCAT('%',#{mTitle},'%')
	</select>

	<select id="countBySearch" parameterType="string"
		resultType="Integer">
		select count(*) from module m join user u on u.userId =
		m.userId where mTitle Like CONCAT('%',#{mTitle},'%')
	</select>

	<select id="moduleListPage" resultType="ModuleList">
		select c.courseId,
		c.cTitle, m.moduleId, m.mTitle, m.udate, u.userId, u.nickName from
		module m, user u, course c where m.courseId=c.courseId and
		m.userId=u.userId
	</select>
	
	</mapper>

